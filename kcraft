#!/bin/bash
# Copyright (c) 2020 Stnby <stnby@kernal.eu>
# Copyright (C) 2025 Dominik Stanis≈Çaw Suchora <hexderm@gmail.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

auth_player_name="$USER"
user_properties=""
game_directory=~/.minecraft

launcher_name='java-minecraft-launcher'
launcher_version='1.6.84-j'

auth_uuid='00000000-0000-0000-0000-000000000000'
auth_session=""
auth_xuid='0000000000000000'
auth_access_token='null'
user_type='legacy'
clientid=0

java_args=""
game_version=""
force='0'

in_terminal=0

IFS=$'\n'

perr() {
    echo "$@" >&2
    exit 1
}

unknown_version() {
    perr "version \"$1\" does not exist"
}

get_manifest() {
    curl --create-dirs -#o "$manifest_path" 'https://launchermeta.mojang.com/mc/game/version_manifest.json'
}

get_metadata_url() {
    jq -Mr '.versions[] | select(.id=="'"$1"'") | .url' "$manifest_path"
}

get_selector() {
    [ "$in_terminal" -eq 1 ] \
        && command -v fzf >/dev/null \
        && echo 'fzf -i --prompt="version> "' \
        && return

    command -v dmenu >/dev/null \
        && echo 'dmenu -l 15 -i -p version' \
        && return

    command -v rofi >/dev/null \
        && echo 'rofi -dmenu -p version -case-insensitive' \
        && return
}

choose_version() {
    get_manifest

    jq -r -j '.versions[] | "\(.id) (\(.type))\n"' "$manifest_path" \
        | eval "$(get_selector)" \
        | sed 's# .*##'
}

get_metadata() {
    local path="$versions_root/$1/$1.json" url
    [ -s "$path" ] || {
        url="$(get_metadata_url "$1")"
        [ -z "$url" ] && unknown_version "$1"
        curl --create-dirs -C- -#o "$path" "$url"
    }
}

get_version_path() {
    local version_path="$versions_root/$1/$1.json"
    [ -s "$version_path" ] || unknown_version "$1"
    echo "$version_path"
}

get_client() {
    local version_path="$(get_version_path "$1")"
    local client_path="${version_path%json}jar"
    [ -s "$client_path" ] || curl -C- -#o "$client_path" "$(jq -r '.downloads.client.url' "$version_path")"
}

get_assets() {
    local version_path="$(get_version_path "$1")"
    local assets_index_name="$(jq -r '.assetIndex.id' "$version_path")"
    local assets_path="$assets_root/indexes/$assets_index_name.json"

    [ -s "$assets_path" ] || curl --create-dirs -C- -#o "$assets_path" "$(jq -r '.assetIndex.url' "$version_path")"

    local objects_path="$assets_root/objects"

    for i in $(jq -r '.objects[].hash' "$assets_path")
    do
        [ -s "$objects_path/${i::2}/$i" ] && continue
        printf 'https://resources.download.minecraft.net/%.2s/%s\n\tout=%.2s/%s\n' "$i" "$i" "$i" "$i"
    done | aria2c -i- -x16 -c -d "$objects_path"
}

get_libs() {
    local version_path="$(get_version_path "$1")"
    for i in $(jq -r '.libraries[].downloads[] | if has("natives-linux") then ."natives-linux" else if has("url") then . else empty end end | "\(.path)\t\(.url)"' "$version_path")
    do
        [ -s "$(cut -f2 <<< "$i")" ] && continue
        printf '%s\n\tout=%s\n' "$(cut -f2 <<< "$i")" "$(cut -f1 <<< "$i")"
    done | aria2c -i- -x16 -c -d "$libraries_root"
}

extract_natives() {
    local version_name="$1"
    local version_path="$(get_version_path "$version_name")"
    jq -r '.libraries[].downloads.classifiers."natives-linux".path // empty' "$version_path" \
        | xargs -I% unzip -n "$libraries_root/%" -d "$versions_root/$version_name/natives"
}

make_minecraft_args_add() {
    local delim=' ' first

    [ "$(tr "$delim" '\n' <<< "$1" | wc -l)" -ne 2 ] && delim='=' # handles -Dflag=value

    if [ "$(tr "$delim" '\n' <<< "$1" | wc -l)" -ne 2 ]
    then
        delim=""
        first="$(sed 's/[0-9].*//' <<< "$1")" # handles -Xmx4G -Xss1M
    else
        first="$(cut -d "$delim" -f1 <<< "$1")"
    fi

    if grep -qE '(^|\s)'"$first$delim" <<< "$2"
    then
        echo -n "$2"
    else
        echo -n "$1 $2"
    fi
}

make_minecraft_args() {
    local t="$(jq -r '.minecraftArguments // (.arguments | to_entries | map(.value) | reverse | flatten | map(if . | type == "string" then . else empty end) | join(" ")) // empty' "$1") $java_args" i

    for i in \
        '-Xmx4G' \
        '-Xss1M' \
        '-Dfile.encoding=UTF-8' \
        '-Djava.library.path=${natives_directory}' \
        '-Dminecraft.launcher.brand=${launcher_name}' \
        '-Dminecraft.launcher.version=${launcher_version}' \
        '-cp ${classpath}' \
        '--version ${version_name}' \
        '--gameDir ${game_directory}' \
        '--assetsDir ${assets_root}' \
        '--assetIndex ${assets_index_name}' \
        '--uuid ${auth_uuid}' \
        '--accessToken ${auth_access_token}' \
        '--username ${auth_player_name}' \
        '--userType ${user_type}' \
        '--versionType ${version_type}'
    do
        t="$(make_minecraft_args_add "$i" "$t")"
    done
    minecraft_keep_arg_order <<< "$t"
}

minecraft_keep_arg_order() {
    tr ' ' '\n' |  awk '
    {
        a[al++]=$0
    }
    END {
        for (i in a) {
            if (a[i] ~ /^-[XD]/) {
                print a[i]
                used[usedl++] = i
            }
        }
        for (i in a) {
            if (a[i] == "-cp") {
                print a[i], a[i+1]
                used[usedl++] = i
                used[usedl++] = i+1
                break
            }
        }
        print "${main_class}"

        for (i in a) {
            found = 0
            for (j in used) {
                if (used[j] == i) {
                    found = 1
                    break
                }
            }
            if (found)
                continue

            print a[i]
        }
    }' | tr '\n' ' '
}

start_client() {
    cd "$game_directory"

    local version_name="$1"
    local version_path="$(get_version_path "$version_name")"
    local version_type="$(jq -r '.type' "$version_path")"
    local assets_index_name="$(jq -r '.assetIndex.id' "$version_path")"
    local natives_directory="$versions_root/$version_name/natives"
    local classpath="$(jq -r '.libraries[].downloads[].path // empty' "$version_path" | xargs -I% printf "$libraries_root/%:"; echo "$versions_root/$version_name/$version_name.jar")"
    local main_class="$(jq -r '.mainClass' "$version_path")"

    eval "java $(make_minecraft_args "$version_path")"
}

run() {
    local metadata_url
    if [ -z "$game_version" ]
    then
        [ -t 0 ] && in_terminal=1
        game_version="$(choose_version)"
        [ -z "$game_version" ] && exit
    fi

    get_metadata "$game_version"

    if [ "$force" -eq 1 -o \! -s "$versions_root/$game_version/$game_version.jar" ]
    then
        get_client "$game_version"
        get_assets "$game_version"
        get_libs "$game_version"
        extract_natives "$game_version"
    fi
    start_client "$game_version"
}

usage() {
    local arg0="$(basename "$0")"
    printf '%s [OPTION...] [VERSION]\n' "$arg0"
    printf "Bash Minecraft launcher\n\n"
    printf "Options:\n"
    printf "  -d,\t--directory DIR\t\tset game directory\n"
    printf "  -u,\t--user USERNAME\t\tset user name\n"
    printf "  -j,\t--java-args ARGS\tadd additional arguments to java\n"
    printf "  -f,\t--force\t\t\tforce redownload of game version\n"
    printf "  -h\t--help\t\t\tshow help\n"
}

while [ "$#" -gt '0' ]
do
    case "$1" in
        -d|--directory)
            game_directory="$2"
            shift;;
        -u|--user)
            auth_player_name="$2"
            shift;;
        -j|--java-args)
            java_args="$2"
            shift;;
        -f|--force)
            force="1";;
        -h|--help)
            usage
            exit;;
        *)
            game_version=$1;;
    esac
    shift
done

assets_root="$game_directory/assets"
game_assets="$assets_root"
libraries_root="$game_directory/libraries"
versions_root="$game_directory/versions"
manifest_path="$game_directory/version_manifest.json"

run
